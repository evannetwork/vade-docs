"use strict";(self.webpackChunkvade_docs=self.webpackChunkvade_docs||[]).push([[6983],{3905:function(e,t,a){a.d(t,{Zo:function(){return l},kt:function(){return h}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),u=c(a),h=i,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return a?n.createElement(m,o(o({ref:t},l),{},{components:a})):n.createElement(m,o({ref:t},l))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4716:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],d={sidebar_position:1},s="BBS+",c={unversionedId:"plugins/credentials/bbs",id:"plugins/credentials/bbs",isDocsHomePage:!1,title:"BBS+",description:"Vade supports the creation of BBS+ based proofs for credentials. The flow for creating a BBS+ based credential requires multiple operations done in Vade directly.",source:"@site/docs/plugins/credentials/bbs.md",sourceDirName:"plugins/credentials",slug:"/plugins/credentials/bbs",permalink:"/vade-docs/docs/plugins/credentials/bbs",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/plugins/credentials/bbs.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Concepts",permalink:"/vade-docs/docs/concepts"},next:{title:"CL AnonCreds",permalink:"/vade-docs/docs/plugins/credentials/cl"}},l=[{value:"Used Vade commands",id:"used-vade-commands",children:[],level:2},{value:"Complete flow for creating a credential",id:"complete-flow-for-creating-a-credential",children:[{value:"Creating a Schema",id:"creating-a-schema",children:[],level:3},{value:"Creating a Revocation Registry",id:"creating-a-revocation-registry",children:[],level:3}],level:2}],p={toc:l};function u(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bbs"},"BBS+"),(0,r.kt)("p",null,"Vade supports the creation of BBS+ based proofs for credentials. The flow for creating a BBS+ based credential requires multiple operations done in Vade directly."),(0,r.kt)("p",null,"Vade uses the bbs implementation from ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/bbs"},"hyperledger")," to create and verify the signatures."),(0,r.kt)("h2",{id:"used-vade-commands"},"Used Vade commands"),(0,r.kt)("p",null,"For the whole flow the vade-evan-bbs module has implemented the following commands"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"vc_zkp create_credential_schema"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp create_revocation_registry_definition"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp issue_credential"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp create_credential_offer"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp present_proof"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp create_credential_proposal"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp request_credential"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp request_proof"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp revoke_credential"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp verify_proof"),(0,r.kt)("li",{parentName:"ul"},"vc_zkp finish_credential")),(0,r.kt)("p",null,"To issue a credential, the issuer needs a DID Document currently registered on the ",(0,r.kt)("inlineCode",{parentName:"p"},"evan.network")," substrate chain."),(0,r.kt)("h2",{id:"complete-flow-for-creating-a-credential"},"Complete flow for creating a credential"),(0,r.kt)("h3",{id:"creating-a-schema"},"Creating a Schema"),(0,r.kt)("p",null,"Every credential is based on a specific schema. This schema describes the structure of the issued data for a credential."),(0,r.kt)("p",null,"Creating a credential schema is needed as base for a credential with a BBS+ Proof. A schema defines the structure of the credential payload and how it is organized. The command creates a new DID and associates the needed DID Document structure for verifying and validating credentials."),(0,r.kt)("p",null,"The command is ",(0,r.kt)("inlineCode",{parentName:"p"},"vc_zkp create_credential_schema")," and has the parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"payload")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method -> This is method where the DID is created (we use ",(0,r.kt)("inlineCode",{parentName:"li"},"did:evan")," for now)"),(0,r.kt)("li",{parentName:"ul"},"options -> With the options, we pass the private key for signing and the associated ",(0,r.kt)("inlineCode",{parentName:"li"},"evan"),' identity. To scope the schema we add `"type":"bbs"``'),(0,r.kt)("li",{parentName:"ul"},"payload -> This contains the payload for the schema.")),(0,r.kt)("p",null,'The Schema is in general a "JSONSchema" which defines the following properties:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "issuer": "did:evan:testcore:0x6240cedfc840579b7fdcd686bdc65a9a8c42dea6",\n    "schemaName": "test_schema",\n    "description": "Test description",\n    "properties": {\n        "test_property_string": {\n            "type": "string"\n        }\n    },\n    "requiredProperties": [\n        "test_property_string"\n    ],\n    "allowAdditionalProperties": false,\n    "issuerPublicKeyDid": "did:evan:testcore:0x6240cedfc840579b7fdcd686bdc65a9a8c42dea6#key-1",\n    "issuerProvingKey": "30d446cc76b19c6eacad89237d021eb2c85144b61d63cb852aee09179f460920"\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"issuer: This is the issuer DID of the schema"),(0,r.kt)("li",{parentName:"ul"},"schemaName: This represents the title of the schema"),(0,r.kt)("li",{parentName:"ul"},"description: You can also add a more detailed description to the schema"),(0,r.kt)("li",{parentName:"ul"},"properties: This is the key-value object where you can define your properties in the schema ",(0,r.kt)("strong",{parentName:"li"},'please only add "type":"string" properties for now')),(0,r.kt)("li",{parentName:"ul"},"requiredProperties: In that array you can define which properties must be set in the credential to be valid"),(0,r.kt)("li",{parentName:"ul"},"allowAdditionalProperties: With that flag its possible to add additional fields which are not mentioned in the schema properties"),(0,r.kt)("li",{parentName:"ul"},"issuerPublicKeyDid: This defines the signer key who adds a JWT proof to the schema credential"),(0,r.kt)("li",{parentName:"ul"},"issuerProvingKey: This is the private key of the signer who sign's the schema credential")),(0,r.kt)("p",null,"example command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'payload=\'{"issuer":"did:evan:testcore:0x6240cedfc840579b7fdcd686bdc65a9a8c42dea6","schemaName":"test_schema","description":"Test description","properties":{"test_property_string":{"type":"string"}},"requiredProperties":["test_property_string"],"allowAdditionalProperties":false,"issuerPublicKeyDid":"did:evan:testcore:0x6240cedfc840579b7fdcd686bdc65a9a8c42dea6#key-1","issuerProvingKey":"30d446cc76b19c6eacad89237d021eb2c85144b61d63cb852aee09179f460920"}\'\n\noption=\'{"type":"bbs","privateKey":"dfcdcb6d5d09411ae9cbe1b0fd9751ba8803dd4b276d5bf9488ae4ede2669106","identity":"did:evan:testcore:0x0d87204c3957d73b68ae28d0af961d3c72403906"}\'\n\n./vade_evan_cli vc_zkp create_credential_schema --method "did:evan" --options $option --payload $payload\n')),(0,r.kt)("p",null,"example response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "did:evan:zkp:0x03d57c17c1202a0c859bc45afb0b102bcfe73ba51be137095fd3d70c91b68e03",\n    "type": "EvanVCSchema",\n    "name": "test_schema",\n    "author": "did:evan:testcore:0x6240cedfc840579b7fdcd686bdc65a9a8c42dea6",\n    "createdAt": "2021-11-05T08:01:00.000Z",\n    "description": "Test description",\n    "properties": {\n        "test_property_string": {\n            "type": "string"\n        }\n    },\n    "required": [\n        "test_property_string"\n    ],\n    "additionalProperties": false,\n    "proof": {\n        "type": "EcdsaPublicKeySecp256k1",\n        "created": "2021-11-05T08:01:00.000Z",\n        "proofPurpose": "assertionMethod",\n        "verificationMethod": "did:evan:testcore:0x6240cedfc840579b7fdcd686bdc65a9a8c42dea6#key-1",\n        "jws": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NkstUiJ9.eyJpYXQiOiIyMDIxLTExLTA1VDA4OjAxOjAwLjAwMFoiLCJkb2MiOnsiaWQiOiJkaWQ6ZXZhbjp6a3A6MHgwM2Q1N2MxN2MxMjAyYTBjODU5YmM0NWFmYjBiMTAyYmNmZTczYmE1MWJlMTM3MDk1ZmQzZDcwYzkxYjY4ZTAzIiwidHlwZSI6IkV2YW5WQ1NjaGVtYSIsIm5hbWUiOiJ0ZXN0X3NjaGVtYSIsImF1dGhvciI6ImRpZDpldmFuOnRlc3Rjb3JlOjB4NjI0MGNlZGZjODQwNTc5YjdmZGNkNjg2YmRjNjVhOWE4YzQyZGVhNiIsImNyZWF0ZWRBdCI6IjIwMjEtMTEtMDVUMDg6MDE6MDAuMDAwWiIsImRlc2NyaXB0aW9uIjoiVGVzdCBkZXNjcmlwdGlvbiIsInByb3BlcnRpZXMiOnsidGVzdF9wcm9wZXJ0eV9zdHJpbmciOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsidGVzdF9wcm9wZXJ0eV9zdHJpbmciXSwiYWRkaXRpb25hbFByb3BlcnRpZXMiOmZhbHNlfSwiaXNzIjoiZGlkOmV2YW46dGVzdGNvcmU6MHg2MjQwY2VkZmM4NDA1NzliN2ZkY2Q2ODZiZGM2NWE5YThjNDJkZWE2In0.y5t411efca94-QrSrduiO4fzrMFDvfCLx77etZGNak4rGXr_yoNhU2EwCDIiX0e_kryFxv6YrB85gGnTXa3R_gA"\n    }\n}\n')),(0,r.kt)("p",null,"The returned JSON structure is your newly created schema did which can be used now when you want to issue credentials. It contains all the properties you defined and also a signature, which is signed by the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"issuerProvingKey"),". Schemas can be reused between JWT/BBS+ and CL Credentials."),(0,r.kt)("h3",{id:"creating-a-revocation-registry"},"Creating a Revocation Registry"),(0,r.kt)("p",null,"Every created credential has the ability to be revoked by the issuer of the credential. For the BBS+ credentials we implemented the concept of the ",(0,r.kt)("a",{parentName:"p",href:"https://w3c-ccg.github.io/vc-status-rl-2020/"},"RevocationList2020")," in VADE. A revocation list is basically a remote anchored credential which holds a bit list where every credential gets a id assigned. This id is the index number in the bit list. If this bit is 0 in the credential, then the associated credential isn't revoked. "),(0,r.kt)("p",null,"This implies that for every credential which should be revoked, the owner of the revocation credential must update the according document."),(0,r.kt)("p",null,"To create a revocation registry we use the command ",(0,r.kt)("inlineCode",{parentName:"p"},"vc_zkp create_revocation_registry")," and has the parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"payload")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method -> This is method where the DID is created (we use ",(0,r.kt)("inlineCode",{parentName:"li"},"did:evan")," for now)"),(0,r.kt)("li",{parentName:"ul"},"options -> With the options, we pass the private key for signing and the associated ",(0,r.kt)("inlineCode",{parentName:"li"},"evan"),' identity. To scope the schema we add `"type":"bbs"``'),(0,r.kt)("li",{parentName:"ul"},"payload -> This contains the payload for the schema.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'payload=\'{"issuerDid":"did:evan:testcore:0x6240cedfc840579b7fdcd686bdc65a9a8c42dea6","issuerPublicKeyDid":"did:evan:testcore:0x6240cedfc840579b7fdcd686bdc65a9a8c42dea6#key-1","issuerProvingKey":"30d446cc76b19c6eacad89237d021eb2c85144b61d63cb852aee09179f460920"}\'\n\noption=\'{"type":"bbs","privateKey":"dfcdcb6d5d09411ae9cbe1b0fd9751ba8803dd4b276d5bf9488ae4ede2669106","identity":"did:evan:testcore:0x0d87204c3957d73b68ae28d0af961d3c72403906"}\'\n\n./vade_evan_cli vc_zkp create_revocation_registry_definition --method "did:evan" --options $option --payload $payload\n')),(0,r.kt)("p",null,"For the creation of a credential you have to first"))}u.isMDXComponent=!0}}]);