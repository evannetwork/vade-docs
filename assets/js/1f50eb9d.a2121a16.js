"use strict";(self.webpackChunkvade_docs=self.webpackChunkvade_docs||[]).push([[5346],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},l=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),l=p(n),u=i,f=l["".concat(s,".").concat(u)]||l[u]||m[u]||r;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=l;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}l.displayName="MDXCreateElement"},3499:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return l}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],d={sidebar_position:3},s="DIDcomm",p={unversionedId:"plugins/didcomm",id:"plugins/didcomm",isDocsHomePage:!1,title:"DIDcomm",description:"DIDcomm plugin implementation is compliant to DIDComm V2,",source:"@site/docs/plugins/didcomm.md",sourceDirName:"plugins",slug:"/plugins/didcomm",permalink:"/vade-docs/docs/plugins/didcomm",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/plugins/didcomm.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Universal Resolver",permalink:"/vade-docs/docs/plugins/dids/uniresolver"},next:{title:"Create a Page",permalink:"/vade-docs/docs/concepts/test"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Sending a message from Sender to Receiver",id:"sending-a-message-from-sender-to-receiver",children:[],level:2},{value:"Didcomm message exchange example",id:"didcomm-message-exchange-example",children:[{value:"Send ping request",id:"send-ping-request",children:[],level:3},{value:"Receive ping",id:"receive-ping",children:[],level:3},{value:"Send ping response",id:"send-ping-response",children:[],level:3},{value:"Receive ping response",id:"receive-ping-response",children:[],level:3}],level:2},{value:"General message types",id:"general-message-types",children:[{value:"ack - Acknowledgement of succesfull messagge exchange",id:"ack---acknowledgement-of-succesfull-messagge-exchange",children:[],level:3},{value:"problem-report -  Reporting problem or denying request",id:"problem-report----reporting-problem-or-denying-request",children:[],level:3}],level:2}],m={toc:c};function l(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"didcomm"},"DIDcomm"),(0,r.kt)("p",null,"DIDcomm plugin implementation is compliant to ",(0,r.kt)("a",{parentName:"p",href:"https://identity.foundation/didcomm-messaging/spec/"},"DIDComm V2"),","),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm"},(0,r.kt)("inlineCode",{parentName:"a"},"vade-didcomm"))," plugin currently offers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"message encryption & decryption using ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/decentralized-identity/didcomm-rs"},"DIDComm rs")),(0,r.kt)("li",{parentName:"ul"},"protocol support using DIDComm message ",(0,r.kt)("inlineCode",{parentName:"li"},"type"))),(0,r.kt)("p",null,"It implements the following ","[",(0,r.kt)("inlineCode",{parentName:"p"},"VadePlugin"),"]"," functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L44"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_send"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L121"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_receive")))),(0,r.kt)("p",null,"Currently supported protocols:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0048-trust-ping/README.md"},(0,r.kt)("inlineCode",{parentName:"a"},"trust_ping"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0023-did-exchange/README.md"},(0,r.kt)("inlineCode",{parentName:"a"},"did_exchange"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/tree/develop#present_proof-protocol"},(0,r.kt)("inlineCode",{parentName:"a"},"present_proof"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/tree/develop#issue_credential-protocol"},(0,r.kt)("inlineCode",{parentName:"a"},"issue_credential"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/tree/develop#presentation_exchange-protocol"},(0,r.kt)("inlineCode",{parentName:"a"},"presentation_exchange")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"didcomm_send")," prepares a message for being sent to the recipient and ",(0,r.kt)("inlineCode",{parentName:"p"},"didcomm_receive")," is used for decryption and analyzing an incoming message. Per default each sent message will be encrypted, either with the saved encryption key from an existing DID exchange with the communication partner, or with the provided one. Specific protocol types can override the encryption setting of a message to just send a plain message (like DID exchange)."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"NOTE"),": When you send any message that will be encrypted, you need to have a finished DID exchange or correct encryption keys, that are passed to vade_didcomm."),(0,r.kt)("p",null,"The two functions ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L44"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_send"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L121"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_receive"))," can be called with two parameters, ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"payload"),", the output is an Object of ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/datatypes.rs#L172"},(0,r.kt)("inlineCode",{parentName:"a"},"VadeDidCommPluginOutput")),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Options: ",(0,r.kt)("a",{parentName:"li",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/datatypes.rs#L166"},(0,r.kt)("inlineCode",{parentName:"a"},"DidCommOptions"))," object,Contains specific information for passing special configuration to the vade_didcomm. Currently its just used to inject specific encryption configuration, to overwrite the default DIDComm DID exchange key encryption and signing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "encryptionKeys": {\n    "encryptionMySecret": "<Either a computed shared secret or a (local) private key>",\n    "encryptionOthersPublic": "<Public key>"\n  },\n  "signingKeys": {\n    "signingMySecret": "<Either a computed shared secret or a (local) private key>",\n    "signingOthersPublic": "<Public key>"\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Payload: Payload for ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L44"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_send"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L121"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_receive"))," should have some basic parameters which are defined as ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/datatypes.rs#L92"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseMessage"))," type, it defines from, to and type fields which are necessary to send or receive data. Apart from ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/datatypes.rs#L92"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseMessage"))," send and receive have different parameters which can be supplied if there are more parameters required:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"type":"https://didcomm.org/trust_ping/1.0/ping","from":"did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp","to":["did:key:z6MkjchhfUsD6mmvni8mCdXHw216Xrm9bQe2mBH1P5RDjVJG"],"comment":"Hi"}\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/datatypes.rs#L100"},(0,r.kt)("inlineCode",{parentName:"a"},"ExtendedMessage")),": This type defines additional parameters which can se used in the payload of ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L44"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_send"))," if more custom parameters are     required to be sent. e.g: Additions objects can be passed as body parameter or some custom parameters can be included in payload if requried by protocol for which message is being exchanged. "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'    {\n         "type": "https://didcomm.org/present-proof/1.0/propose-presentation",\n         "service_endpoint": "https://evan.network",\n         "from": "did:key:z6MkjchhfUsD6mmvni8mCdXHw216Xrm9bQe2mBH1P5RDjVJG",\n         "to": ["did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp"],\n         "body": {"state":"PresentationProposed","presentation_proposal":{"attribute":[{"name":"90eb30f3d80f49178cc4504c7bb13ad1","cred_def_id":"cred_def_id","mime_type":"application/json","value":"YmFzZSA2NCBkYXRhIHN0cmluZw","referent":"referent"}],"predicate":[{"name":"some name","cred_def_id":"cred_def_id","predicate":"application/json","threshold":5}]}},\n         "thid": "90eb30f3d80f49178cc4504c7bb13ad1"\n   }\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/evannetwork/didcomm-rs/blob/f3c9499b7f09bef1765bcdb5f5e9ec207b40ac38/src/messages/jwe.rs#L33"},(0,r.kt)("inlineCode",{parentName:"a"},"Jwe")),": This type refers to encrypted message generated as output of ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L44"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_send")),", it can be passed to ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/vade_didcomm.rs#L121"},(0,r.kt)("inlineCode",{parentName:"a"},"didcomm_receive"))," as payload if there are some parameters which are required to decrypted."))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"protected":"eyJ0eXAiOiJhcHBsaWNhdGlvbi9kaWRjb21tLWVuY3J5cHRlZCtqc29uIiwiZW5jIjoiWEMyMFAiLCJraWQiOiI5NjVkNjk5NzYwYzcyN2EwNGRiMjJiY2U2ZmUyMDg3NmUyMTI2YjhmMWE2NGUxZGU0MmI0OWJjY2I5ZTg4MWFhIiwic2tpZCI6ImRpZDprZXk6ejZNa2pjaGhmVXNENm1tdm5pOG1DZFhIdzIxNlhybTliUWUybUJIMVA1UkRqVkpHIiwiYWxnIjoiRUNESC0xUFUrWEMyMFBLVyJ9","recipients":[{"header":{"key_ops":[],"alg":"ECDH-1PU+XC20PKW","kid":"did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp","epk":{"kty":"OKP","crv":"X25519","x":"d1PRwEdAaCg9lFa6zdpkYLkNvyo8o-0Mq8dIDVWaASA"},"iv":"PEI8C2IyJsWnIrfg0n2-1TGxlIj3REyQ","tag":"yOFwRajO794tj47ConOLAA"},"encrypted_key":"V5UNErvAqHoqOWwyZ9hcOsrd0KI_nsBNyTpEiTjOhyE"}],"ciphertext":"s3qUEJPjsnLVsKc5kbvKfH4w1FuVLg-CHOCjWTmBvdDyw1ldBZd6qpn97YSDOY3IX7wZ-W6gGHtuL-spdPQt8XAKnrJAteU0U28_9infWKeMFypbtAzSHjzp51R0wugBur1XfjetYhL7s1igdGu3L0sfKkcgG1y1zRNc9PswZWEUvLVZ4Bc4fFkGZ_EWYBOqGZQ3wAzl8cf5XIwhDGVynCDNN3YGadJxrDvHtGkBZdgPohAZIzbDD_7H3FTlWrKDFrpwemfXTh5nPTuoDf6xU65bLPd_XNCi-lM21rpFw4HfcyMK0TnMrLFTfYT8qETzeDx067jCt3Po7v_Ax4wENP9RtcGWmLDnJBWCiIpV_QV_p6CQ8MnmpX5xqPk7BGOmdhnlc4MSGklEbQywhrQrNzFXOD7u4FuiGubUV3HcBogERXLNj1V_SpwrBgms5oMKWjJ0X8Z3SOgCQtlM2IqzQ6iFxvgdf6YiL-jOVy6hiEUjxPEtTKbjBdPSO_frrMo6rmSDYRM-L7c9r7mc2pJ81pxYlr1-15W7SF1rpCAsky_Ct68xym3GtVCFH6K5G2vekClRlSV-_Qrvliuz6QdYAsNEFbabxYd_G09wGeIM5g2OKmWm6Z1CRfr1wEEko65Ml4HHWmRHiWYDbMGJcfh8RPOoOZQ9qx9uA0PskjH8Jmvrwo9t_5SMRLYuLyRy2-_1KNd69r820eGxSVbhScvRIu0b6oE7dV25CnIYqiwXovGuwVZw0ZKbPSPoDarsZpYHXeZPhvQEm694YXW7GE_zYu41KHH6nCA2fq72tPZJloO-8kmN3N_rXWLvzgTCKX0m2o4v9KYfa6QA5J-A_o799tcK9MK-WUETBUclIwSBxz9XGkI3v-KI2WnCf7bg4pxJiisgfcMHiAe2CM5srlH7p5pLuGhgP8qDoum1Wyc4lCgaVjPmimtuBVXxCyfU91RlBpaKXEtaS5MKMKQFbl4UfLIUI9hOYBj5gZs8G61km2StyitLo5Vplvqr3duS1kfaQKfnDKF4AZP0OTIFYwLjsUMYHb3WR4nMMeKka829gMIJf2zZcc9_1DSeRu4mP2_w5eoaK37eZEJ-2IzAUGFNazNLYKVj0AC68zeCAiEELPfvfpFOBs4QxOc6_OdNw1L42P2PaiRnzGuePSUOKvw6QVJt9kYQkhRpEB48T0K5b75X5wtejwum85sauEPIAaWR-GuOq1JteiZP3718EmNRBFfRcM0Hoc6nFUcQv5UpIJw6hzG6PHSAyNwXJnCHTeXhJQdCcCHhj1nTitaqUvaFzR-KK1UMOzgxD9KXHpGEADfZxOZ_qQvKCyAggNmzu2RmRIAVd2_Fx8eU7ElDzj3xyI7BSQX7N8gDspLcQ1j22EpV18IbqlDQzV0-DMAwvGSJveShmCMQVChn2k-MVqf3PhWVM_3FabZKuYGH_p0uTOyWo8Y1dFHPmvsA2n4NGiw_Stw9tU1TAfAoLQY2-n3X-BhLwu4m9JmHsI83kUagHA-CRDYeXQ2-KexVx1CLo3vr-S77t0vUhKBhfjTF40w2q3VjpeJqqAka9Qh2-DK2zWc0Xc3tKrnM3riGcH3oeP58YFFhPsPjVODHwC0tUxjxybEbziBIMzN6Dj7bSudYHLgGzV4E0xEMCYO4rIQCehqCJheJABEfRAC520BemPgT_I5B-siqk108OD3n6Uj_6xVkVIjlyRSVqdWAtv2hrzxGoE8Alft7JIyt-eLHuMUiTLxCg45ca5nEbzZHIjqvbVIToKfr9lU0plcEdHI4nPp3Hsz8g3MsLmnFjFwZQrX5QI07sryZiMmtSVxLrSEa4eYftTui_cetKQBctKmC3x_4w1RN7d4QnJQxBPSFoB6SspFlw2dRL4sUZqNngdZ2WrFPuKjjLXBbAZtA7iUk0gRH9bBpQzhDKvc3Dv9OHgOfmdvF3onYLAXVPYEf3GbvZyBTcyyNCsr1iRzdPTz4CwSAxK7vHUlWhNkEYdWWNnfSIfe7ueJPmcGqu-dja-t26Zt2kgZk8phlBGQVgowjQl1oDGk3IYnHfVZaKJy9y7Yu_2RAyQkXvFW-0ptz61Lm6LwuWwmFV0tB8db803HL4t8QrBAD0-UaIVLhWhvMn9Ot2MxmaybjotZ9tTEZqSnPZuB3h5vclU2HjKXr2ZZAoCoYdKzP-yNPLl_KNmmCppJGWxfXtHpTeaiqIAWlW6jTUcXXDbr5qVg2dQMSgIkOyNBxQfS1PE0MB2vZ9ZXBvuPu7VBA3q4gGvzvNX0AoCeUuDr7cDP-WUDuj4b0UuyItqnlv9RVoegQZEriY2CrxnftJs4jYUWS5pgf5OVMTbZb3yWAwohFY0_KZhCIckszF6FeB2JxYYCkaxXHkLPXASKEVSfUE4S7EJw4EcWZmoIXJdW4Ex9Uj58IZCgzTk8MX8RXlMQankEB9A","iv":"0hua0wULMOY8TsbwQDX4Dm-rYOP5sz8n","tag":"pqVXn6G1b4fSteLcQjtReQ"}\n')))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Output: ",(0,r.kt)("a",{parentName:"li",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/src/datatypes.rs#L172"},(0,r.kt)("inlineCode",{parentName:"a"},"VadeDidCommPluginOutput"))," object, The result of both functions will have the same structure and will always return a stringified json, with the following pattern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": {<Encrypted message `Jwe` for didcomm_send or Decrypted message for didcomm_receive>},\n  "messageRaw": {<Unencrypted raw message>},\n  "metadata": {<Metadata associated with message, it\'s protocol specific and optional>}\n}\n')),(0,r.kt)("p",null,"The data that is represented in ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," is protocol specific. The message is also attached unencrypted as ",(0,r.kt)("inlineCode",{parentName:"p"},"messageRaw"),"."),(0,r.kt)("h2",{id:"sending-a-message-from-sender-to-receiver"},"Sending a message from Sender to Receiver"),(0,r.kt)("p",null,"For some specific protocol if you want to send a message from sender DID to receiver DID, the option and payload would look like following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'payload={"type":"https://didcomm.org/present-proof/1.0/request-presentation","service_endpoint":"https://evan.network","from":"did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp","to":["did:key:z6MkjchhfUsD6mmvni8mCdXHw216Xrm9bQe2mBH1P5RDjVJG"],"body":{"state":"PresentationRequested","presentation_attach":[{"type":"https://didcomm.org/present-proof/1.0/request-presentation","id":"1efc7eca99254891ba49ecfefe46c9b8","mime_type":"application/json","data":"YmFzZSA2NCBkYXRhIHN0cmluZw"}]},"thid":"1efc7eca99254891ba49ecfefe46c9b8"}\n\noption={"encryptionKeys":{"encryptionMySecret":"5046adc1dba838867b2bbbfdd0c3423e58b57970b5267a90f57960924a87f156","encryptionOthersPublic":"d92f5eeaa24fd4e66221c770f704a5e2639a476bab82cfec40bd2874abeb481f"},"signingKeys":{"signingMySecret":"0eef2b066f5ceff7305db222f934e4bff8cc93dfdcc366ec6670287d4c71a4a3","signingOthersPublic":"653c161434879919469c6dd43cf1d561d4facf8fdcbd926789d0dc9f260bd33c"},"skipProtocolHandling":false}\n\n./vade_evan_cli didcomm send --options $option --payload $payload\n\n')),(0,r.kt)("p",null,"The above example demonstrates sending ",(0,r.kt)("inlineCode",{parentName:"p"},"request-presentation")," message for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hyperledger/aries-rfcs/tree/master/features/0037-present-proof"},(0,r.kt)("inlineCode",{parentName:"a"},"Present Proof Protocol")),".\nPlease check test cases for complete flow ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/tests/present-proof.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"present-proof test"))),(0,r.kt)("h2",{id:"didcomm-message-exchange-example"},"Didcomm message exchange example"),(0,r.kt)("p",null,"Lets try to send and receive DIDcomm messages for a simple protocol e.g: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0048-trust-ping/README.md"},(0,r.kt)("inlineCode",{parentName:"a"},"trust_ping")),", in trust ping the protocol communication steps are following."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sender creates a ping message and sends to receiver."),(0,r.kt)("li",{parentName:"ul"},"Receiver receives ping from sender."),(0,r.kt)("li",{parentName:"ul"},"Receiver creates a response message and send the ping response back to sender."),(0,r.kt)("li",{parentName:"ul"},"Sender  receives the response of ping message.")),(0,r.kt)("p",null,"Lets try to send and receive ping messages with vade-evan cli example"),(0,r.kt)("h3",{id:"send-ping-request"},"Send ping request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'option={"encryptionKeys":{"encryptionMySecret":"5046adc1dba838867b2bbbfdd0c3423e58b57970b5267a90f57960924a87f156","encryptionOthersPublic":"d92f5eeaa24fd4e66221c770f704a5e2639a476bab82cfec40bd2874abeb481f"},"signingKeys":{"signingMySecret":"0eef2b066f5ceff7305db222f934e4bff8cc93dfdcc366ec6670287d4c71a4a3","signingOthersPublic":"653c161434879919469c6dd43cf1d561d4facf8fdcbd926789d0dc9f260bd33c"},"skipProtocolHandling":false}\n\npayload={"type":"https://didcomm.org/trust_ping/1.0/ping","from":"did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp","to":["did:key:z6MkjchhfUsD6mmvni8mCdXHw216Xrm9bQe2mBH1P5RDjVJG"],"comment":"Hi"}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"./vade_evan_cli didcomm send --options $option --payload $payload\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Output of send ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'\n{ "message":  {"protected":"eyJ0eXAiOiJhcHBsaWNhdGlvbi9kaWRjb21tLWVuY3J5cHRlZCtqc29uIiwiZW5jIjoiWEMyMFAiLCJraWQiOiI5NjVkNjk5NzYwYzcyN2EwNGRiMjJiY2U2ZmUyMDg3NmUyMTI2YjhmMWE2NGUxZGU0MmI0OWJjY2I5ZTg4MWFhIiwic2tpZCI6ImRpZDprZXk6ejZNa2pjaGhmVXNENm1tdm5pOG1DZFhIdzIxNlhybTliUWUybUJIMVA1UkRqVkpHIiwiYWxnIjoiRUNESC0xUFUrWEMyMFBLVyJ9","recipients":[{"header":{"key_ops":[],"alg":"ECDH-1PU+XC20PKW","kid":"did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp","epk":{"kty":"OKP","crv":"X25519","x":"d1PRwEdAaCg9lFa6zdpkYLkNvyo8o-0Mq8dIDVWaASA"},"iv":"PEI8C2IyJsWnIrfg0n2-1TGxlIj3REyQ","tag":"yOFwRajO794tj47ConOLAA"},"encrypted_key":"V5UNErvAqHoqOWwyZ9hcOsrd0KI_nsBNyTpEiTjOhyE"}],"ciphertext":"s3qUEJPjsnLVsKc5kbvKfH4w1FuVLg-CHOCjWTmBvdDyw1ldBZd6qpn97YSDOY3IX7wZ-W6gGHtuL-spdPQt8XAKnrJAteU0U28_9infWKeMFypbtAzSHjzp51R0wugBur1XfjetYhL7s1igdGu3L0sfKkcgG1y1zRNc9PswZWEUvLVZ4Bc4fFkGZ_EWYBOqGZQ3wAzl8cf5XIwhDGVynCDNN3YGadJxrDvHtGkBZdgPohAZIzbDD_7H3FTlWrKDFrpwemfXTh5nPTuoDf6xU65bLPd_XNCi-lM21rpFw4HfcyMK0TnMrLFTfYT8qETzeDx067jCt3Po7v_Ax4wENP9RtcGWmLDnJBWCiIpV_QV_p6CQ8MnmpX5xqPk7BGOmdhnlc4MSGklEbQywhrQrNzFXOD7u4FuiGubUV3HcBogERXLNj1V_SpwrBgms5oMKWjJ0X8Z3SOgCQtlM2IqzQ6iFxvgdf6YiL-jOVy6hiEUjxPEtTKbjBdPSO_frrMo6rmSDYRM-L7c9r7mc2pJ81pxYlr1-15W7SF1rpCAsky_Ct68xym3GtVCFH6K5G2vekClRlSV-_Qrvliuz6QdYAsNEFbabxYd_G09wGeIM5g2OKmWm6Z1CRfr1wEEko65Ml4HHWmRHiWYDbMGJcfh8RPOoOZQ9qx9uA0PskjH8Jmvrwo9t_5SMRLYuLyRy2-_1KNd69r820eGxSVbhScvRIu0b6oE7dV25CnIYqiwXovGuwVZw0ZKbPSPoDarsZpYHXeZPhvQEm694YXW7GE_zYu41KHH6nCA2fq72tPZJloO-8kmN3N_rXWLvzgTCKX0m2o4v9KYfa6QA5J-A_o799tcK9MK-WUETBUclIwSBxz9XGkI3v-KI2WnCf7bg4pxJiisgfcMHiAe2CM5srlH7p5pLuGhgP8qDoum1Wyc4lCgaVjPmimtuBVXxCyfU91RlBpaKXEtaS5MKMKQFbl4UfLIUI9hOYBj5gZs8G61km2StyitLo5Vplvqr3duS1kfaQKfnDKF4AZP0OTIFYwLjsUMYHb3WR4nMMeKka829gMIJf2zZcc9_1DSeRu4mP2_w5eoaK37eZEJ-2IzAUGFNazNLYKVj0AC68zeCAiEELPfvfpFOBs4QxOc6_OdNw1L42P2PaiRnzGuePSUOKvw6QVJt9kYQkhRpEB48T0K5b75X5wtejwum85sauEPIAaWR-GuOq1JteiZP3718EmNRBFfRcM0Hoc6nFUcQv5UpIJw6hzG6PHSAyNwXJnCHTeXhJQdCcCHhj1nTitaqUvaFzR-KK1UMOzgxD9KXHpGEADfZxOZ_qQvKCyAggNmzu2RmRIAVd2_Fx8eU7ElDzj3xyI7BSQX7N8gDspLcQ1j22EpV18IbqlDQzV0-DMAwvGSJveShmCMQVChn2k-MVqf3PhWVM_3FabZKuYGH_p0uTOyWo8Y1dFHPmvsA2n4NGiw_Stw9tU1TAfAoLQY2-n3X-BhLwu4m9JmHsI83kUagHA-CRDYeXQ2-KexVx1CLo3vr-S77t0vUhKBhfjTF40w2q3VjpeJqqAka9Qh2-DK2zWc0Xc3tKrnM3riGcH3oeP58YFFhPsPjVODHwC0tUxjxybEbziBIMzN6Dj7bSudYHLgGzV4E0xEMCYO4rIQCehqCJheJABEfRAC520BemPgT_I5B-siqk108OD3n6Uj_6xVkVIjlyRSVqdWAtv2hrzxGoE8Alft7JIyt-eLHuMUiTLxCg45ca5nEbzZHIjqvbVIToKfr9lU0plcEdHI4nPp3Hsz8g3MsLmnFjFwZQrX5QI07sryZiMmtSVxLrSEa4eYftTui_cetKQBctKmC3x_4w1RN7d4QnJQxBPSFoB6SspFlw2dRL4sUZqNngdZ2WrFPuKjjLXBbAZtA7iUk0gRH9bBpQzhDKvc3Dv9OHgOfmdvF3onYLAXVPYEf3GbvZyBTcyyNCsr1iRzdPTz4CwSAxK7vHUlWhNkEYdWWNnfSIfe7ueJPmcGqu-dja-t26Zt2kgZk8phlBGQVgowjQl1oDGk3IYnHfVZaKJy9y7Yu_2RAyQkXvFW-0ptz61Lm6LwuWwmFV0tB8db803HL4t8QrBAD0-UaIVLhWhvMn9Ot2MxmaybjotZ9tTEZqSnPZuB3h5vclU2HjKXr2ZZAoCoYdKzP-yNPLl_KNmmCppJGWxfXtHpTeaiqIAWlW6jTUcXXDbr5qVg2dQMSgIkOyNBxQfS1PE0MB2vZ9ZXBvuPu7VBA3q4gGvzvNX0AoCeUuDr7cDP-WUDuj4b0UuyItqnlv9RVoegQZEriY2CrxnftJs4jYUWS5pgf5OVMTbZb3yWAwohFY0_KZhCIckszF6FeB2JxYYCkaxXHkLPXASKEVSfUE4S7EJw4EcWZmoIXJdW4Ex9Uj58IZCgzTk8MX8RXlMQankEB9A","iv":"0hua0wULMOY8TsbwQDX4Dm-rYOP5sz8n","tag":"pqVXn6G1b4fSteLcQjtReQ"},"messageRaw": {"body":null,"created_time":1637240575,"expires_time":null,"from":"did:key:z6MkjchhfUsD6mmvni8mCdXHw216Xrm9bQe2mBH1P5RDjVJG","id":"ada405b6-cbb2-4bab-9813-b750494e8ae5","pthid":null,"type":"https://didcomm.org/trust_ping/1.0/ping_response","thid":null,"to":["did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp"],"comment":"hello,there?"},"metadata": {}}\n')),(0,r.kt)("h3",{id:"receive-ping"},"Receive ping"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'receiver_option={"encryptionKeys":{"encryptionMySecret":"f068e2f7ccc3eee220065e1dc937d34d548ec59be6488fea5ae1397e63f81c52","encryptionOthersPublic":"5bf55c73b82ebe22be80f3430667af570fae2556a6415e6b30d4065300aa947d"},"signingKeys":{"signingMySecret":"27a98eb5846de97476c8a92f627602a4f75e0b0af78045f2883f9fad428bf76a","signingOthersPublic":"ce341ea46fd1a80982a66c82b172faca7a088ab3da1ab8fd208100489f428c6b"},"skipProtocolHandling":false}\n\n\n./vade_evan_cli didcomm receive --options $receiver_option --payload $payload\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Output of receive")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'{"message": {"body":null,"created_time":1637054158,"expires_time":null,"from":"did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp","id":"5bbb0be3-accb-4dba-bb9f-9122ededb45a","pthid":null,"type":"https://didcomm.org/trust_ping/1.0/ping","thid":null,"to":["did:key:z6MkjchhfUsD6mmvni8mCdXHw216Xrm9bQe2mBH1P5RDjVJG"],"comment":"Hi"},                "messageRaw": {"body":null,"created_time":1637054158,"expires_time":null,"from":"did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp","id":"5bbb0be3-accb-4dba-bb9f-9122ededb45a","pthid":null,"type":"https://didcomm.org/trust_ping/1.0/ping","thid":null,"to":["did:key:z6MkjchhfUsD6mmvni8mCdXHw216Xrm9bQe2mBH1P5RDjVJG"],"comment":"Hi"},                "metadata": {}}\n')),(0,r.kt)("h3",{id:"send-ping-response"},"Send ping response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'option={"encryptionKeys":{"encryptionMySecret":"f068e2f7ccc3eee220065e1dc937d34d548ec59be6488fea5ae1397e63f81c52","encryptionOthersPublic":"5bf55c73b82ebe22be80f3430667af570fae2556a6415e6b30d4065300aa947d"},"signingKeys":{"signingMySecret":"27a98eb5846de97476c8a92f627602a4f75e0b0af78045f2883f9fad428bf76a","signingOthersPublic":"ce341ea46fd1a80982a66c82b172faca7a088ab3da1ab8fd208100489f428c6b"},"skipProtocolHandling":false}\n\npayload={"type":"https://didcomm.org/trust_ping/1.0/ping_response","from":"did:key:z6MkjchhfUsD6mmvni8mCdXHw216Xrm9bQe2mBH1P5RDjVJG","to":["did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp"],"comment":"hello,there?"}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"./vade_evan_cli didcomm send --options $option --payload $payload\n")),(0,r.kt)("h3",{id:"receive-ping-response"},"Receive ping response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'option={"encryptionKeys":{"encryptionMySecret":"5046adc1dba838867b2bbbfdd0c3423e58b57970b5267a90f57960924a87f156","encryptionOthersPublic":"d92f5eeaa24fd4e66221c770f704a5e2639a476bab82cfec40bd2874abeb481f"},"signingKeys":{"signingMySecret":"0eef2b066f5ceff7305db222f934e4bff8cc93dfdcc366ec6670287d4c71a4a3","signingOthersPublic":"653c161434879919469c6dd43cf1d561d4facf8fdcbd926789d0dc9f260bd33c"},"skipProtocolHandling":false}\n\n./vade_evan_cli didcomm receive --options $option --payload $payload\n')),(0,r.kt)("h2",{id:"general-message-types"},"General message types"),(0,r.kt)("p",null,"In some protocols there are extra messages need to be sent to indicate error or successful message exchange to end the session, these messages have following structures:-"),(0,r.kt)("h3",{id:"ack---acknowledgement-of-succesfull-messagge-exchange"},"ack - Acknowledgement of succesfull messagge exchange"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n        "type": "https://didcomm.org/notification/1.0/ack",\n        "from": "",\n        "to": "",\n        "id": "",\n        "thid": "",\n        "status": "Success",\n}\n')),(0,r.kt)("h3",{id:"problem-report----reporting-problem-or-denying-request"},"problem-report -  Reporting problem or denying request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n        "type": "https://didcomm.org/report-problem/1.0/problem-report",\n        "from": "from DID",\n        "to": "to DID",\n        "id": "<id>",\n        "thid": "<thid>",\n        "description": "",\n        "problem_items": "",\n        "who_retries": "",\n        "fix_hint": "",\n        "impact": "",\n        "where": "",\n        "noticed_time": "",\n        "tracking_uri": "",\n        "excalation_uri": "",\n}\n')),(0,r.kt)("p",null,"Complete test cases and flow for various protocols can be found at ",(0,r.kt)("a",{parentName:"p",href:"https://git.slock.it/equs/interop/vade/vade-didcomm/-/blob/main/tests"},(0,r.kt)("inlineCode",{parentName:"a"},"Protocols test cases")),"."))}l.isMDXComponent=!0}}]);